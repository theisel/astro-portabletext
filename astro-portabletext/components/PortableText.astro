---
import {
  isPortableTextBlock,
  isPortableTextListItemBlock,
  isPortableTextToolkitList,
  isPortableTextToolkitSpan,
  isPortableTextToolkitTextNode,
  nestLists,
  buildMarksTree,
  LIST_NEST_MODE_HTML,
} from "@portabletext/toolkit";

import type { PortableTextBlock } from "@portabletext/types";

import type {
  MissingComponentHandler,
  PortableTextComponents,
  PortableTextProps,
  Props as ComponentProps,
  TypedObject,
} from "../lib/types";

import type { Component, NodeType } from "../lib/internal";
import { isComponent, mergeComponents } from "../lib/internal";

import { getWarningMessage, printWarning } from "../lib/warnings";

import type { Context } from "../lib/context";
import { key as contextRef } from "../lib/context";

import Block from "./Block.astro";
import HardBreak from "./HardBreak.astro";
import List from "./List.astro";
import ListItem from "./ListItem.astro";
import Mark from "./Mark.astro";
import UnknownBlock from "./UnknownBlock.astro";
import UnknownList from "./UnknownList.astro";
import UnknownListItem from "./UnknownListItem.astro";
import UnknownMark from "./UnknownMark.astro";
import UnknownType from "./UnknownType.astro";

export interface Props extends PortableTextProps {
  class?: astroHTML.JSX.HTMLAttributes["class"];
}

const {
  value,
  components: componentOverrides = {},
  listNestingMode = LIST_NEST_MODE_HTML,
  onMissingComponent = true,
  class: astroClass,
} = Astro.props;

const components = mergeComponents(
  {
    type: {},
    unknownType: UnknownType,
    block: {
      h1: Block,
      h2: Block,
      h3: Block,
      h4: Block,
      h5: Block,
      h6: Block,
      blockquote: Block,
      normal: Block,
    },
    unknownBlock: UnknownBlock,
    list: {
      bullet: List,
      number: List,
      menu: List,
    },
    unknownList: UnknownList,
    listItem: {
      bullet: ListItem,
      number: ListItem,
      menu: ListItem,
    },
    unknownListItem: UnknownListItem,
    mark: {
      code: Mark,
      em: Mark,
      link: Mark,
      "strike-through": Mark,
      strong: Mark,
      underline: Mark,
    },
    unknownMark: UnknownMark,
    hardBreak: HardBreak,
  },
  componentOverrides
) as PortableTextComponents;

const noop = () => {};

const missingComponentHandler = ((
  handler: unknown
): MissingComponentHandler => {
  if (typeof handler === "function") {
    return handler as MissingComponentHandler;
  }
  return !handler ? noop : printWarning;
})(onMissingComponent);

const serializeNode =
  (isInline: boolean) =>
  (node: TypedObject, index: number = 0) =>
    asComponentProps(node, index, isInline);

const serializeChildren = (
  node: TypedObject & { children: TypedObject[] },
  isInline: boolean
) => node.children.map(serializeNode(isInline));

const serializeMarksTree = (node: PortableTextBlock) =>
  buildMarksTree(node).map(serializeNode(true));

const asComponentProps = (
  node: TypedObject,
  index: number,
  isInline: boolean
): ComponentProps<typeof node> => ({
  node,
  index,
  isInline,
  class: astroClass,
});

const provideComponent = (
  nodeType: NodeType,
  type: string
): Component | undefined => {
  const component = components[nodeType];

  return isComponent(component)
    ? component
    : component[type as keyof typeof component] ??
        (missingComponentHandler(getWarningMessage(nodeType, type), {
          nodeType,
          type,
        }) as undefined);
};

const prepareForRender = (
  props: ComponentProps<TypedObject>
): [Component | string, ComponentProps<TypedObject>[]] => {
  const { node } = props;

  return isPortableTextToolkitList(node)
    ? [
        provideComponent("list", node.listItem) ?? components.unknownList,
        serializeChildren(node, false),
      ]
    : isPortableTextListItemBlock(node)
    ? [
        provideComponent("listItem", node.listItem) ??
          components.unknownListItem,
        serializeMarksTree(node).map((children) => {
          if (node.style !== "normal") {
            const { listItem, ...blockNode } = node;
            children = serializeNode(false)(blockNode, 0);
          }
          return children;
        }),
      ]
    : isPortableTextToolkitSpan(node)
    ? [
        provideComponent("mark", node.markType) ?? components.unknownMark,
        serializeChildren(node, true),
      ]
    : isPortableTextBlock(node)
    ? [
        provideComponent(
          "block",
          node.style ??
            (node.style = "normal") /* Make sure style has been set */
        ) ?? components.unknownBlock,
        serializeMarksTree(node),
      ]
    : isPortableTextToolkitTextNode(node)
    ? [
        "\n" === node.text && isComponent(components.hardBreak)
          ? components.hardBreak
          : node.text,
        [],
      ]
    : [provideComponent("type", node._type) ?? components.unknownType, []];
};

(globalThis as any)[contextRef] = (node: TypedObject): Context => {
  return {
    getDefaultComponent: provideDefaultComponent.bind(null, node),
    getUnknownComponent: provideUnknownComponent.bind(null, node),
  };
};

// Returns the `default` component related to the passed in node
const provideDefaultComponent = (node: TypedObject) => {
  return isPortableTextToolkitList(node)
    ? List
    : isPortableTextListItemBlock(node)
    ? ListItem
    : isPortableTextToolkitSpan(node)
    ? Mark
    : isPortableTextBlock(node)
    ? Block
    : isPortableTextToolkitTextNode(node)
    ? HardBreak
    : UnknownType;
};

// Returns the `unknown` component related to the passed in node
const provideUnknownComponent = (node: TypedObject) => {
  return isPortableTextToolkitList(node)
    ? components.unknownList
    : isPortableTextListItemBlock(node)
    ? components.unknownListItem
    : isPortableTextToolkitSpan(node)
    ? components.unknownMark
    : isPortableTextBlock(node)
    ? components.unknownBlock
    : !isPortableTextToolkitTextNode(node)
    ? components.unknownType
    : (() => {
        throw new Error(
          `[PortableText getUnknownComponent] Unable to provide component with node type ${node._type}`
        );
      })();
};

// Make sure we have an array of blocks
const blocks = Array.isArray(value) ? value : [value];

// Using a generator to avoid creating a new array
function* renderBlocks() {
  for (const it of nestLists(blocks, listNestingMode)) {
    yield asComponentProps(it, 0, false);
  }
}
---

{
  [...renderBlocks()].map(function render(props) {
    const [Cmp, children] = prepareForRender(props);

    return !isComponent(Cmp) ? (
      <Fragment set:text={Cmp} />
    ) : (
      <Cmp {...props}>{children.map(render)}</Cmp>
    );
  })
}
